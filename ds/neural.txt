#Import packages and import dataset
import numpy as np
import pandas as pd
dataset = pd.read_csv('E:/6th Sem/DATA SCIENCE/train.csv')
dataset.head(10)
#Changing pandas dataframe to numpy array
X = dataset.iloc[:,:20].values
y = dataset.iloc[:,20:21].values
X
y
#Normalizing the data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)
X
from sklearn.preprocessing import OneHotEncoder
ohe = OneHotEncoder()
y = ohe.fit_transform(y).toarray()
#One hot encoding is a process to convert integer classes into binary values.
y
#Data set is preprocessed and ready to feed in the neural network
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.1)
#Building Neural Network Keras is a simple tool for constructing a
#neural network.
import keras
from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(16, input_dim=20, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(4, activation='softmax'))
#model.add is used to add a layer to our neural network. We need to specify
model.compile(loss='categorical_crossentropy', optimizer='adam',
metrics=['accuracy'])
#History consists of model accuracy and losses after each epoch.
history = model.fit(X_train, y_train, epochs=100, batch_size=64)
y_pred = model.predict(X_test)

#Converting predictions to label
pred = list()
for i in range(len(y_pred)):
    pred.append(np.argmax(y_pred[i]))
#Converting one hot encoded test label to label
test = list()
for i in range(len(y_test)):
    test.append(np.argmax(y_test[i]))
from sklearn.metrics import accuracy_score
a = accuracy_score(pred,test)
print('Accuracy is:', a*100)
#We can use test data as validation data and can check the accuracies after
history = model.fit(X_train, y_train,validation_data = (X_test,y_test),
epochs=100, batch_size=64)
from matplotlib import pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

